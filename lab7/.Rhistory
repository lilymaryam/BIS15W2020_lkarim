?msleep
head(msleep)
head(msleep)
sleep <- data(msleep)
sleep <- data(msleep)
print(sleep)
glimpse(sleep)
sleep <- data.frame(msleep)
sleep <- data.frame(msleep)
nrow(sleep)
sleep[,1]
names(sleep)
glimpse(sleep)
summary(sleep)
print(sleep[,1])
print(sleep[1,])
sleep[,1]
print(sleep[1,])
sleep[,1]
sleep[1,]
sleep[1,]
sleep[,1]
print(sleep[,11])
levels(hbirds$neighborhood)
subset(sleep, bodywt <= 1)
small <- subset(sleep, bodywt <= 1)
small <- subset(sleep, bodywt <= 1)
print(small)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
print(smallmammals)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
largemammals <- subset(sleep, bodywt <= 1)
large <- data.frame(largemammals)
w <- small$bodywt
mean(w)
w <- large$bodywt
mean(w)
t <- large$bodywt
mean(t)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
t <- large$bodywt
mean(t)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
w <- small$bodywt
mean(w)
largemammals <- subset(sleep, bodywt <= 1)
large <- data.frame(largemammals)
t <- large$bodywt
mean(t)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
print(small)
largemammals <- subset(sleep, bodywt <= 1)
large <- data.frame(largemammals)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
mean(small$bodywt)
largemammals <- subset(sleep, bodywt <= 1)
large <- data.frame(largemammals)
mean(large$bodywt)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
largemammals <- subset(sleep, bodywt <= 1)
large <- data.frame(largemammals)
print(large)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
largemammals <- subset(sleep, bodywt >= 200)
large <- data.frame(largemammals)
print(large)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
mean(small$bodywt)
largemammals <- subset(sleep, bodywt >= 200kg)
largemammals <- subset(sleep, bodywt >= 200)
large <- data.frame(largemammals)
mean(large$bodywt)
largemammals <- subset(sleep, bodywt >= 200)
large <- data.frame(largemammals)
mean_weight_L <- mean(large$bodywt)
largemammals <- subset(sleep, bodywt >= 200)
large <- data.frame(largemammals)
mean_weight_L <- mean(large$bodywt)
print(mean_weight_L)
smallmammals <- subset(sleep, bodywt <= 1)
small <- data.frame(smallmammals)
mean_weight_S <- mean(small$bodywt)
print(mean_weight_S)
sleep_duration <- large$sleep_total
mean(sleep_duration)
sleep_duration_S <- small$sleep_total
mean(sleep_duration)
sleep_duration_S <- small$sleep_total
mean(sleep_duration_S)
msleep {ggplot2}
help(msleep)
help(msleep)
sleepiest <- subset(sleep, sleep_total >= 18)
sleepiest <- subset(sleep, sleep_total >= 18)
sleepiest <- subset(sleep, sleep_total >= 18)
print(sleepiest)
sleepiest <- subset(sleep, sleep_total >= 18)
print(sleepiest[,1])
sleepiest <- subset(sleep, sleep_total >= 18)
print(sleepiest)
sleep_duration_L <- large$sleep_total
mean(sleep_duration_L)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit
UC_admit <- na.omit(UC_admit)
UC_admit
UC_admit %>%
anyNA()
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("x", "Select", choices = c("Campus", "Academic_Yr", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "FilteredCountFR", fill = "Ethnicity")) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("x", "Select", choices = c("Campus", "Ethnicity", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <-
dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("camp", "Choose Campus", choices = "Campus")
selectInput("x", "Select", choices = c("Campus", "Ethnicity", "Category"), selected = "Campus"),
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("camp", "Choose Campus", choices = "Campus"),
selectInput("x", "Select", choices = c("Campus", "Ethnicity", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
install.packages("shinydashboard")
library("shinydashboard")
install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
gabon
ui <- dashboardPage(
dashboardHeader(title = "Defaunation in Africa Plot App "),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("taxon", "Select Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"), selected = "RA_Apes"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\"))
ui <- fluidPage(
selectInput("x", "Select Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Locomotion"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("locomotion", " Select Locomotion of Interest:",
choices=unique(homerange$locomotion)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("locomotionPlot")
)
)
)
#install.packages("shiny")
library(shiny)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Locomotion"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("locomotion", " Select Locomotion of Interest:",
choices=unique(homerange$locomotion)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("locomotionPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$locomotionPlot <- renderPlot({
homerange %>%
filter(locomotion == input$locomotion) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("camp", "Choose Campus", choices = unique(UC_admit$Campus),
selectInput("x", "Select", choices = c("Campus", "Ethnicity", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("camp", "Choose Campus", choices = unique(UC_admit$Campus)),
selectInput("x", "Select", choices = c("Campus", "Ethnicity", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("camp", "Choose Campus", choices = unique(UC_admit$Campus)),
selectInput("x", "Select", choices = c("Ethnicity", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("camp", "Choose Campus", choices = unique(UC_admit$Campus)),
selectInput("x", "Select", choices = c("Ethnicity", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = camp)) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("x", "Select", choices = c("Campus", "Academic_Yr", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "FilteredCountFR", fill = "Ethnicity")) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across the UCs"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Variables", width = 3,
selectInput("x", "Select", choices = c("Campus", "Academic_Yr", "Category"), selected = "Campus"),
), # close the first box
box(title = "Plot ", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "FilteredCountFR", fill = "Ethnicity")) + geom_bar(stat="identity") + theme_light(base_size = 10)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
